import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import GRU, Dense, Dropout
from imblearn.over_sampling import RandomOverSampler
from tensorflow.keras.utils import to_categorical


ros = RandomOverSampler(random_state=42)
X_resampled, y_resampled = ros.fit_resample(X, y)

scaler = StandardScaler()
X_resampled = scaler.fit_transform(X_resampled)

# Reshape for GRU input
X_reshaped = X_resampled.reshape((X_resampled.shape[0], X_resampled.shape[1], 1))

y_categorical = to_categorical(y_resampled)

def create_gru_model(input_shape):
    model = Sequential()
    model.add(GRU(32, input_shape=input_shape))
    model.add(Dense(10, activation='relu'))
    model.add(Dense(2, activation='softmax'))
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    return model

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)

kf = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)
cv_accuracy = []

for train_index, test_index in kf.split(X_reshaped, y_resampled):
    X_train_val, X_test = X_reshaped[train_index], X_reshaped[test_index]
    y_train_val, y_test = y_categorical[train_index], y_categorical[test_index]
    
    val_split = int(0.8 * len(X_train_val))
    X_train, X_val = X_train_val[:val_split], X_train_val[val_split:]
    y_train, y_val = y_train_val[:val_split], y_train_val[val_split:]

    gru_model = create_gru_model((X_train.shape[1], X_train.shape[2]))
    gru_model.fit(X_train, y_train, epochs=150, batch_size=16, verbose=0)
    val_pred_probs = gru_model.predict(X_val)

    # Check if y_val has more than one class
    if len(np.unique(np.argmax(y_val, axis=1))) > 1:
        # Train Random Forest on validation set predictions
        rf_model.fit(val_pred_probs, np.argmax(y_val, axis=1))

        # Evaluate the ensemble model on test set
        test_pred_probs = gru_model.predict(X_test)
        y_pred = rf_model.predict(test_pred_probs)
        y_test_classes = np.argmax(y_test, axis=1)
        accuracy = accuracy_score(y_test_classes, y_pred)
        cv_accuracy.append(accuracy)

if cv_accuracy:
    print(f'Average Cross-Validation Accuracy of Ensemble Model: {np.mean(cv_accuracy):.4f}')
else:
    print("No valid folds were available for training the Random Forest model.")

# Optionally, you can train the GRU model on the entire dataset and then train Random Forest
gru_model.fit(X_reshaped, y_categorical, epochs=150, batch_size=16)
gru_pred_probs = gru_model.predict(X_reshaped)
rf_model.fit(gru_pred_probs, np.argmax(y_categorical, axis=1))

y_pred = rf_model.predict(gru_model.predict(X_reshaped))
y_test_classes = np.argmax(y_categorical, axis=1)

final_cm = confusion_matrix(y_test_classes, y_pred)
print("Confusion Matrix for Ensemble Model:")
print(final_cm)

print("Classification Report:")
print(classification_report(y_test_classes, y_pred))
