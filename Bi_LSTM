import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import StratifiedKFold
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Bidirectional
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.losses import CategoricalCrossentropy
from tensorflow.keras.utils import to_categorical


file_path = 'preprocessed_ilpd.csv'
data = pd.read_csv(file_path)
X = data.drop(columns='class')
y = data['class'].apply(lambda x: 1 if x == 2 else 0)  # Encode the target: 1 for cirrhosis, 0 for no cirrhosis

# One-hot encode the target variable
y_categorical = to_categorical(y, num_classes=2)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Reshape data for LSTM input [samples, time steps, features]
X_lstm = np.expand_dims(X_scaled, axis=1)

#BiLSTM model
def create_bilstm_model():
    model = Sequential([
        Bidirectional(LSTM(64, return_sequences=True, input_shape=(1, X.shape[1]))),
        Bidirectional(LSTM(64, return_sequences=False)),
        Dense(64, activation='relu'),
        Dense(32, activation='relu'),  
        Dense(16, activation='relu'),  
        Dense(2, activation='softmax')
    ])
    model.compile(optimizer=Adam(learning_rate=0.001), 
                  loss=CategoricalCrossentropy(), 
                  metrics=['accuracy'])
    return model

# cross-validation 
kf = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)
cv_accuracy = []

for train_index, test_index in kf.split(X_lstm, y):
    X_train, X_test = X_lstm[train_index], X_lstm[test_index]
    y_train, y_test = y_categorical[train_index], y_categorical[test_index]

    # Create a new model instance for each fold
    model = create_bilstm_model()
    history = model.fit(X_train, y_train, epochs=30, batch_size=16, validation_split=0.2, verbose=0)
    
    _, accuracy = model.evaluate(X_test, y_test, verbose=0)
    cv_accuracy.append(accuracy)

print(f'Average Cross-Validation Accuracy: {np.mean(cv_accuracy):.4f}')

# train the model on the entire dataset after cross-validation
model.fit(X_lstm, y_categorical, epochs=30, batch_size=16, verbose=1)

